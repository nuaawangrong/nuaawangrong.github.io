<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome</title>
    <url>/2021/06/04/%E4%BD%A0%E5%A5%BD/</url>
    <content><![CDATA[<h1 id="你好呀"><a href="#你好呀" class="headerlink" title="你好呀"></a>你好呀</h1><h2 id="欢迎来到我的博客"><a href="#欢迎来到我的博客" class="headerlink" title="欢迎来到我的博客"></a>欢迎来到我的博客</h2><span id="more"></span>

<figure class="highlight c"><figcaption><span>C</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Welcome to my Blog!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;Welcome to my Blog!&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><figcaption><span>Python</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to my Blog&quot;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><figcaption><span>Javascript</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;Welcome to my Blog&quot;</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>Shell</span></figcaption><table><tr><td class="code"><pre><span class="line">echo Welcome to my Blog</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>blog</tag>
      </tags>
  </entry>
  <entry>
    <title>Vim笔记</title>
    <url>/2021/06/08/vim%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>第一次接触Vim是在大一的时候，计算机导论实验课，需要写python的程序，实验环境在实验楼的虚拟机里。第一节课就是熟悉Linux操作的Vim的编辑，仍然记得Vim进入后无法退出的场景，不禁直呼这软件设计是如此反人类！！！hhhhhhh<br>不过后面又继续敲代码，在自己的电脑上装虚拟机，买了自己的服务器，又不得不继续和Vim打交道。时不时的就得找找Vim的命令，但是掌握的命令多了起来之后，发现，诶，其实也还挺好用的嘛。嗯，真香！！！<br>不过Vim命令太多，只能说不常用就会忘记，写这样一篇笔记，也是为了方便加深Vim命令的印象，能提高Vim的使用效率吧。</p>
<span id="more"></span>
<h1 id="初识Vim"><a href="#初识Vim" class="headerlink" title="初识Vim"></a>初识Vim</h1><p><code>Vim</code>其实就是一个文本编辑器，类似于<code>VScode</code>和<code>Notepade++</code>,但<code>Vim</code>和其他的编辑器不一样，有着三种模式和命令操作，强大的模式加命令组合可以使得用户少用甚至不用鼠标，可以更专注于文本的处理，有着更流畅的工作节奏。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol>
<li>Linux <figure class="highlight shell"><figcaption><span>shell</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> git <span class="built_in">clone</span> http://github.com/vim/vim.git</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> <span class="built_in">cd</span> vim/src</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> make</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo make install</span></span><br></pre></td></tr></table></figure></li>
<li>windows<br> 下载<code>gVim</code>软件，按提示安装即可。</li>
</ol>
<p>安装完成后使用命令<code>vim --version</code>查看<code>Vim</code>版本，验证是否安装成功。</p>
<h2 id="通过-vimrc文件配置Vim"><a href="#通过-vimrc文件配置Vim" class="headerlink" title="通过.vimrc文件配置Vim"></a>通过<code>.vimrc</code>文件配置<code>Vim</code></h2><p>系统配置下不是隐藏文件，可通过<code>find . -name | grep vimrc</code>命令查找。<br>用户配置下为隐藏文件，通常位于用户主目录下，可能需要自行创建。</p>
<figure class="highlight vim"><table><tr><td class="code"><pre><span class="line"><span class="keyword">syntax</span> <span class="keyword">on</span>                      <span class="comment">&quot; 支持语法高亮</span></span><br><span class="line"><span class="keyword">filetype</span> plugin <span class="built_in">indent</span> <span class="keyword">on</span>      <span class="comment">&quot; 启用根据文件类型自动缩进</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> autoindent                 <span class="comment">&quot; 开始新行时处理缩进</span></span><br><span class="line"><span class="keyword">set</span> expandtab                  <span class="comment">&quot; 将制表符Tab展开为空格，对Python尤其有用</span></span><br><span class="line"><span class="keyword">set</span> tabstop=<span class="number">4</span>                  <span class="comment">&quot; 要计算的空格数 </span></span><br><span class="line"><span class="keyword">set</span> <span class="built_in">shiftwidth</span>=<span class="number">4</span>               <span class="comment">&quot; 用于自动缩进的空格数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> backspace=<span class="number">2</span>                <span class="comment">&quot; 在多数终端上修正退格键Backspace的行为</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">colorscheme</span> murphy             <span class="comment">&quot; 修改配色</span></span><br></pre></td></tr></table></figure>
<h2 id="常用操作命令"><a href="#常用操作命令" class="headerlink" title="常用操作命令"></a>常用操作命令</h2><ol>
<li>打开并编辑文件（文件不存在则新建） <figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">$ vim <span class="keyword">new</span><span class="type"></span>.txt</span><br></pre></td></tr></table></figure></li>
<li>按下编辑键<code>i</code>、<code>I</code>、<code>a</code>、<code>A</code>、<code>O</code>、<code>o</code>等进入编辑模式，此时与其他编辑器一样，可进行文本修改。</li>
<li>按下<code>ESC</code>键，退出编辑模式。</li>
<li>保存和关闭文件<code>: wq</code>，输入命令后按下<code>Enter</code>键。</li>
<li>移动光标<table>
<thead>
<tr>
<th align="center">按键</th>
<th align="center">行为</th>
</tr>
</thead>
<tbody><tr>
<td align="center">h</td>
<td align="center">向左移动</td>
</tr>
<tr>
<td align="center">j</td>
<td align="center">向上移动</td>
</tr>
<tr>
<td align="center">k</td>
<td align="center">向下移动</td>
</tr>
<tr>
<td align="center">l</td>
<td align="center">向右移动</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">逐个狭义单词移动</td>
</tr>
<tr>
<td align="center">W</td>
<td align="center">逐个广义单词移动</td>
</tr>
<tr>
<td align="center">e</td>
<td align="center">向前移动直到最近狭义单词的结尾</td>
</tr>
<tr>
<td align="center">E</td>
<td align="center">向前移动直到最近广义单词的结尾</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">向前移动到狭义单词的开头</td>
</tr>
<tr>
<td align="center">B</td>
<td align="center">向前移动到广义单词的开头</td>
</tr>
<tr>
<td align="center">{</td>
<td align="center">向前移动一个段落</td>
</tr>
<tr>
<td align="center">}</td>
<td align="center">向后移动一个段落</td>
</tr>
</tbody></table>
</li>
<li>修改命令<code>c</code>(可在删除一段文字后，立刻进入插入模式。是一个复合命令，在后面必须指定其他命令)<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">行为</th>
</tr>
</thead>
<tbody><tr>
<td align="center">c3e</td>
<td align="center">删除三个单词（逗号视为一个单词）</td>
</tr>
<tr>
<td align="center">cb</td>
<td align="center">删除一个单词(光标处为结束的单词)</td>
</tr>
<tr>
<td align="center">cw</td>
<td align="center">删除一个单词(光标处为开始的狭义单词)</td>
</tr>
<tr>
<td align="center">cW</td>
<td align="center">删除一个单词(光标处为结束的广义单词)</td>
</tr>
</tbody></table>
</li>
<li><code>d</code>命令与<code>c</code>命令功能相似，只不过在实现删除后，不进入插入模式。</li>
<li>删除一整行<table>
<thead>
<tr>
<th align="center">命令</th>
<th align="center">行为</th>
</tr>
</thead>
<tbody><tr>
<td align="center">cc</td>
<td align="center">清除整行，然后进入插入模式。保持当前的缩进水平。</td>
</tr>
<tr>
<td align="center">dd</td>
<td align="center">删除整行，不进入插入模式。</td>
</tr>
</tbody></table>
</li>
<li>撤销和重复<table>
<thead>
<tr>
<th>命令</th>
<th>行为</th>
</tr>
</thead>
<tbody><tr>
<td>u</td>
<td>撤销最后一次操作</td>
</tr>
<tr>
<td>Ctrl + r</td>
<td>重做此操作</td>
</tr>
</tbody></table>
</li>
<li><code>Vim</code>手册<br><code>: help</code>：可快速进入<code>Vim</code>手册中。<br>若想了解某个命令例如<code>cc</code>命令可执行<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line"><span class="symbol">:h</span> cc</span><br></pre></td></tr></table></figure>
若未找到正确的词条，需要在按下回车键前按下<code>Ctrl + D</code>，从可选择的标签列表中选择正确的词条。</li>
</ol>
<h2 id="vim工作模式"><a href="#vim工作模式" class="headerlink" title="vim工作模式"></a>vim工作模式</h2><p>命令模式、文本输入模式(编辑模式)、末行模式</p>
<h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><h3 id="文本输入模式-编辑模式"><a href="#文本输入模式-编辑模式" class="headerlink" title="文本输入模式(编辑模式)"></a>文本输入模式(编辑模式)</h3><h3 id="末行模式"><a href="#末行模式" class="headerlink" title="末行模式"></a>末行模式</h3>]]></content>
      <tags>
        <tag>Vim</tag>
      </tags>
  </entry>
  <entry>
    <title>Leetcode刷题</title>
    <url>/2021/06/07/Leetcode%E5%88%B7%E9%A2%98/</url>
    <content><![CDATA[<h1 id="Leetcode刷题记录"><a href="#Leetcode刷题记录" class="headerlink" title="Leetcode刷题记录"></a>Leetcode刷题记录</h1><h1 id="每日一题"><a href="#每日一题" class="headerlink" title="每日一题"></a>每日一题</h1><span id="more"></span>
<h2 id="日期：2021年6月7日"><a href="#日期：2021年6月7日" class="headerlink" title="日期：2021年6月7日"></a>日期：2021年6月7日</h2><h3 id="题目：-494-目标和"><a href="#题目：-494-目标和" class="headerlink" title="题目：[494] 目标和"></a>题目：[494] <a href="https://leetcode-cn.com/problems/target-sum/description/">目标和</a></h3><h3 id="描述："><a href="#描述：" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight aspectj"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 nums 和一个整数 <span class="keyword">target</span> 。</span><br><span class="line"></span><br><span class="line">向数组中的每个整数前添加 <span class="string">&#x27;+&#x27;</span> 或 <span class="string">&#x27;-&#x27;</span> ，然后串联起所有整数，可以构造一个 表达式 ：</span><br><span class="line"></span><br><span class="line">例如，nums = [<span class="number">2</span>, <span class="number">1</span>] ，可以在 <span class="number">2</span> 之前添加 <span class="string">&#x27;+&#x27;</span> ，在 <span class="number">1</span> 之前添加 <span class="string">&#x27;-&#x27;</span> ，然后串联起来得到表达式 <span class="string">&quot;+2-1&quot;</span> 。</span><br><span class="line">返回可以通过上述方法构造的、运算结果等于 <span class="keyword">target</span> 的不同 表达式 的数目。</span><br></pre></td></tr></table></figure>
<h3 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight tap"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line"></span><br><span class="line">输入：nums = [1,1,1,1,1], target = 3</span><br><span class="line">输出：5</span><br><span class="line">解释：一共有<span class="number"> 5 </span>种方法让最终目标和为<span class="number"> 3 </span>。</span><br><span class="line">-1 +<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>= 3</span><br><span class="line">+1 -<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>= 3</span><br><span class="line">+1 +<span class="number"> 1 </span>-<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>= 3</span><br><span class="line">+1 +<span class="number"> 1 </span>+<span class="number"> 1 </span>-<span class="number"> 1 </span>+<span class="number"> 1 </span>= 3</span><br><span class="line">+1 +<span class="number"> 1 </span>+<span class="number"> 1 </span>+<span class="number"> 1 </span>-<span class="number"> 1 </span>= 3</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line"></span><br><span class="line">输入：nums = [1], target = 1</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure>
<h3 id="提示："><a href="#提示：" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>1 &lt;= nums.length &lt;= 20</li>
<li>0 &lt;= nums[i] &lt;= 1000</li>
<li>0 &lt;= sum(nums[i]) &lt;= 1000</li>
<li>-1000 &lt;= target &lt;= 100</li>
</ul>
<h3 id="解答："><a href="#解答：" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">findTargetSumWays</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        cnt = <span class="built_in">count</span>(nums, target, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">count</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums, <span class="keyword">int</span> target, <span class="keyword">int</span> res, <span class="keyword">int</span> deep)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (deep == nums.<span class="built_in">size</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (target == res)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        cnt += <span class="built_in">count</span>(nums, target, res + nums[deep], deep + <span class="number">1</span>);</span><br><span class="line">        cnt += <span class="built_in">count</span>(nums, target, res + (<span class="number">-1</span>) * nums[deep], deep + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> cnt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路："><a href="#思路：" class="headerlink" title="思路："></a>思路：</h3><p>用的是递归解决，但是花费时间很长，还可以再优化优化。</p>
<h2 id="日期：2021年6月8日"><a href="#日期：2021年6月8日" class="headerlink" title="日期：2021年6月8日"></a>日期：2021年6月8日</h2><h3 id="题目：-169-多数元素"><a href="#题目：-169-多数元素" class="headerlink" title="题目：[169] 多数元素"></a>题目：[169] <a href="https://leetcode-cn.com/problems/majority-element/">多数元素</a></h3><h3 id="描述：-1"><a href="#描述：-1" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight excel"><table><tr><td class="code"><pre><span class="line">给定一个大小为 <span class="built_in">n</span> 的数组，找到其中的多数元素。多数元素是指在数组中出现次数 大于 ⌊ <span class="built_in">n</span>/<span class="number">2</span> ⌋ 的元素。</span><br><span class="line"></span><br><span class="line">你可以假设数组是非空的，并且给定的数组总是存在多数元素。</span><br></pre></td></tr></table></figure>
<h3 id="示例：-1"><a href="#示例：-1" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="selector-attr">[3,2,3]</span></span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="selector-attr">[2,2,1,1,1,2,2]</span></span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure>
<h3 id="进阶："><a href="#进阶：" class="headerlink" title="进阶："></a>进阶：</h3><p>尝试设计时间复杂度为 O(n)、空间复杂度为 O(1) 的算法解决此问题。</p>
<h3 id="解答：-1"><a href="#解答：-1" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.<span class="built_in">find</span>(nums[i]);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (it == mp.<span class="built_in">end</span>())</span><br><span class="line">                mp[nums[i]] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                mp[nums[i]]++;</span><br><span class="line">            <span class="keyword">if</span> (mp[nums[i]] &gt; (nums.<span class="built_in">size</span>() / <span class="number">2</span>))</span><br><span class="line">                <span class="keyword">return</span> nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="思路：-1"><a href="#思路：-1" class="headerlink" title="思路："></a>思路：</h3><p>使用C++中STL的map结构，遍历一遍数组，将数组元素加入到map中，并记录出现的次数，及时判断出现的次数是否大于n/2。<br>时间复杂度为O(n),空间复杂度为O(n)。按照题目提示，空间复杂度上还可继续优化。</p>
<h2 id="日期：2021年6月9日"><a href="#日期：2021年6月9日" class="headerlink" title="日期：2021年6月9日"></a>日期：2021年6月9日</h2><h3 id="题目：-1027-独一无二的出现次数"><a href="#题目：-1027-独一无二的出现次数" class="headerlink" title="题目：[1027] 独一无二的出现次数"></a>题目：[1027] <a href="https://leetcode-cn.com/problems/unique-number-of-occurrences/">独一无二的出现次数</a></h3><h3 id="描述：-2"><a href="#描述：-2" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight actionscript"><table><tr><td class="code"><pre><span class="line">给你一个整数数组 arr，请你帮忙统计数组中每个数的出现次数。</span><br><span class="line"></span><br><span class="line">如果每个数的出现次数都是独一无二的，就返回 <span class="literal">true</span>；否则返回 <span class="literal">false</span>。 </span><br></pre></td></tr></table></figure>
<h3 id="示例：-2"><a href="#示例：-2" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">arr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line">解释：在该数组中，<span class="number">1</span> 出现了 <span class="number">3</span> 次，<span class="number">2</span> 出现了 <span class="number">2</span> 次，<span class="number">3</span> 只出现了 <span class="number">1</span> 次。没有两个数的出现次数相同。</span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">arr</span> = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line">输出：<span class="literal">false</span></span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">arr</span> = [-<span class="number">3</span>,<span class="number">0</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">3</span>,<span class="number">10</span>,<span class="number">0</span>]</span><br><span class="line">输出：<span class="literal">true</span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="提示：-1"><a href="#提示：-1" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>1 &lt;= arr.length &lt;= 1000</li>
<li>-1000 &lt;= arr[i] &lt;= 1000</li>
</ul>
<h3 id="解答：-2"><a href="#解答：-2" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>c++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">uniqueOccurrences</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;arr)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; arr.<span class="built_in">size</span>(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.<span class="built_in">find</span>(arr[i]);</span><br><span class="line">            <span class="keyword">if</span> (it == mp.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                mp[arr[i]] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                mp[arr[i]]++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        set&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line">        <span class="keyword">for</span> (map&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt;::iterator it = mp.<span class="built_in">begin</span>(); it != mp.<span class="built_in">end</span>(); it++)</span><br><span class="line">        &#123;</span><br><span class="line">            set&lt;<span class="keyword">int</span>&gt;::iterator it2 = st.<span class="built_in">find</span>(it-&gt;second);</span><br><span class="line">            <span class="keyword">if</span> (it2 == st.<span class="built_in">end</span>())</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">insert</span>(it-&gt;second);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="思路：-2"><a href="#思路：-2" class="headerlink" title="思路："></a>思路：</h3><p>第一次遍历统计数组中每个元素出现的次数，存入map中，再次遍历map,将出现的次数再存入set中，检查是否重复出现。</p>
<p>时间复杂度：O(n)，空间复杂度：O(n)。</p>
<h3 id="题目：-1190-反转每对括号间的子串"><a href="#题目：-1190-反转每对括号间的子串" class="headerlink" title="题目：[1190] 反转每对括号间的子串"></a>题目：[1190] <a href="https://leetcode-cn.com/problems/reverse-substrings-between-each-pair-of-parentheses/">反转每对括号间的子串</a></h3><h3 id="描述：-3"><a href="#描述：-3" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">给出一个字符串 s（仅含有小写英文字母和括号）。</span><br><span class="line"></span><br><span class="line">请你按照从括号内到外的顺序，逐层反转每对匹配括号中的字符串，并返回最终的结果。</span><br><span class="line"></span><br><span class="line">注意，您的结果中 不应 包含任何括号。</span><br></pre></td></tr></table></figure>
<h3 id="示例：-3"><a href="#示例：-3" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight nix"><table><tr><td class="code"><pre><span class="line">示例 <span class="number">1</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;(abcd)&quot;</span></span><br><span class="line">输出：<span class="string">&quot;dcba&quot;</span></span><br><span class="line">示例 <span class="number">2</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;(u(love)i)&quot;</span></span><br><span class="line">输出：<span class="string">&quot;iloveu&quot;</span></span><br><span class="line">解释：先反转子字符串 <span class="string">&quot;love&quot;</span> ，然后反转整个字符串。</span><br><span class="line">示例 <span class="number">3</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;(ed(et(oc))el)&quot;</span></span><br><span class="line">输出：<span class="string">&quot;leetcode&quot;</span></span><br><span class="line">解释：先反转子字符串 <span class="string">&quot;oc&quot;</span> ，接着反转 <span class="string">&quot;etco&quot;</span> ，然后反转整个字符串。</span><br><span class="line">示例 <span class="number">4</span>：</span><br><span class="line"></span><br><span class="line">输入：<span class="attr">s</span> = <span class="string">&quot;a(bcdefghijkl(mno)p)q&quot;</span></span><br><span class="line">输出：<span class="string">&quot;apmnolkjihgfedcbq&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="提示：-2"><a href="#提示：-2" class="headerlink" title="提示："></a>提示：</h3><ul>
<li>0 &lt;= s.length &lt;= 2000</li>
<li>s 中只有小写英文字母和括号</li>
<li>题目测试用例确保所有括号都是成对出现的</li>
</ul>
<h3 id="解答：-3"><a href="#解答：-3" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">string <span class="title">reverseParentheses</span><span class="params">(string s)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">char</span> ch;</span><br><span class="line">        <span class="comment">//一个栈</span></span><br><span class="line">        stack&lt;<span class="keyword">char</span>&gt; st;</span><br><span class="line">        <span class="comment">//一个队列</span></span><br><span class="line">        queue&lt;<span class="keyword">char</span>&gt; q;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; s[i]; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (s[i] == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s[i] == <span class="string">&#x27;)&#x27;</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">while</span> (st.<span class="built_in">top</span>() != <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    ch = st.<span class="built_in">top</span>();</span><br><span class="line">                    q.<span class="built_in">push</span>(ch);</span><br><span class="line">                    st.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">                st.<span class="built_in">pop</span>(); <span class="comment">//弹出&#x27;(&#x27;</span></span><br><span class="line">                <span class="keyword">while</span> (!q.<span class="built_in">empty</span>())</span><br><span class="line">                &#123;</span><br><span class="line">                    ch = q.<span class="built_in">front</span>();</span><br><span class="line">                    st.<span class="built_in">push</span>(ch);</span><br><span class="line">                    q.<span class="built_in">pop</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                st.<span class="built_in">push</span>(s[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        string res;</span><br><span class="line">        <span class="keyword">while</span> (!st.<span class="built_in">empty</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ch = st.<span class="built_in">top</span>();</span><br><span class="line">            res = ch + res;</span><br><span class="line">            st.<span class="built_in">pop</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路：-3"><a href="#思路：-3" class="headerlink" title="思路："></a>思路：</h3><p>使用栈来读取S的字符，当出现成对的括号时弹出括号里的字符，并存入队列中，再将其入栈，实现字符串的反转。<br>当匹配最外面的一层括号时，也会进行反转，所以最后一次需要反着读取栈中的字符。</p>
<p>时间复杂度：O(n)，空间复杂度：O(n)。</p>
<h2 id="日期：2021年7月11日"><a href="#日期：2021年7月11日" class="headerlink" title="日期：2021年7月11日"></a>日期：2021年7月11日</h2><h3 id="题目：-283-移动零"><a href="#题目：-283-移动零" class="headerlink" title="题目：[283] 移动零"></a>题目：[283] <a href="https://leetcode-cn.com/problems/move-zeroes/">移动零</a></h3><h3 id="描述：-4"><a href="#描述：-4" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">给定一个数组nums，编写一个函数将所有0移动到数组的末尾，同时保持非零元素的相对顺序。</span><br></pre></td></tr></table></figure>

<h3 id="示例：-4"><a href="#示例：-4" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight accesslog"><table><tr><td class="code"><pre><span class="line">输入: <span class="string">[0,1,0,3,12]</span></span><br><span class="line">输出: <span class="string">[1,3,12,0,0]</span></span><br></pre></td></tr></table></figure>

<h3 id="说明"><a href="#说明" class="headerlink" title="说明:"></a>说明:</h3><ol>
<li>必须在原数组上操作，不能拷贝额外的数组。</li>
<li>尽量减少操作次数。</li>
</ol>
<h3 id="解答：-4"><a href="#解答：-4" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">moveZeroes</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> j=<span class="number">0</span>,temp;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(nums[i]!=<span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                temp = nums[j];</span><br><span class="line">                nums[j]=nums[i];</span><br><span class="line">                nums[i] = temp;</span><br><span class="line">                j++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路：-4"><a href="#思路：-4" class="headerlink" title="思路："></a>思路：</h3><p>使用两个辅助下标，下标j指向存放非零元素的位置，i下标指向当前的数组元素。<br>判断nums[i]是否为非零元素，是的话就交换nums[i]和nums[j]，并将j向右移动。<br>可以省略交换过程中的中间变量temp。但需要判断i和j是否相同。</p>
<p>时间复杂度：O(n)，空间复杂度：O(1)。</p>
<h2 id="日期：2021年7月12日"><a href="#日期：2021年7月12日" class="headerlink" title="日期：2021年7月12日"></a>日期：2021年7月12日</h2><h3 id="题目：-15-三数之和"><a href="#题目：-15-三数之和" class="headerlink" title="题目：[15] 三数之和"></a>题目：[15] <a href="https://leetcode-cn.com/problems/3sum/">三数之和</a></h3><h3 id="描述：-5"><a href="#描述：-5" class="headerlink" title="描述："></a>描述：</h3><figure class="highlight livecodeserver"><table><tr><td class="code"><pre><span class="line">给你一个包含 n 个整数的数组 nums，判断 nums 中是否存在三个元素 <span class="keyword">a</span>，b，c ，使得 <span class="keyword">a</span> + b + c = <span class="number">0</span> ？请你找出所有和为 <span class="number">0</span> 且不重复的三元组。</span><br><span class="line"></span><br><span class="line">注意：答案中不可以包含重复的三元组。</span><br></pre></td></tr></table></figure>

<h3 id="示例：-5"><a href="#示例：-5" class="headerlink" title="示例："></a>示例：</h3><figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">示例 1：</span><br><span class="line">输入：nums = <span class="comment">[-1,0,1,2,-1,-4]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[-1,-1,2]</span>,<span class="comment">[-1,0,1]</span>]</span></span><br><span class="line"></span><br><span class="line">示例 2：</span><br><span class="line">输入：nums = <span class="comment">[]</span></span><br><span class="line">输出：<span class="comment">[]</span></span><br><span class="line"></span><br><span class="line">示例 3：</span><br><span class="line">输入：nums = <span class="comment">[0]</span></span><br><span class="line">输出：<span class="comment">[]</span></span><br></pre></td></tr></table></figure>

<h3 id="提示"><a href="#提示" class="headerlink" title="提示:"></a>提示:</h3><ul>
<li>0 &lt;= nums.length &lt;= 3000</li>
<li>-105 &lt;= nums[i] &lt;= 105</li>
</ul>
<h3 id="解答：-5"><a href="#解答：-5" class="headerlink" title="解答："></a>解答：</h3><figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法一：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        </span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        vector &lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,j,k;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>()<span class="number">-2</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;nums.<span class="built_in">size</span>()<span class="number">-1</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span>(k=j+<span class="number">1</span>;k&lt;nums.<span class="built_in">size</span>();k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(nums[i]+nums[j]+nums[k]==<span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[j]);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[k]);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在结果中去掉重复的元组</span></span><br><span class="line">        <span class="built_in">deDuplication</span>(res);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路：-5"><a href="#思路：-5" class="headerlink" title="思路："></a>思路：</h3><p>暴力解法，三重循环直到找出满足题意的结果<br>时间复杂度：O(n^3)，空间复杂度：O(n)。</p>
<figure class="highlight c++"><figcaption><span>C++</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment">//解法二：</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; <span class="built_in">threeSum</span>(vector&lt;<span class="keyword">int</span>&gt;&amp; nums) &#123;</span><br><span class="line">        vector&lt;vector&lt;<span class="keyword">int</span>&gt;&gt; res;</span><br><span class="line">        vector &lt;<span class="keyword">int</span>&gt; temp;</span><br><span class="line">        <span class="keyword">int</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> i,l,r;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//首先判断nums数组的大小，进行排序</span></span><br><span class="line">        <span class="keyword">if</span>(nums.<span class="built_in">size</span>()&gt;=<span class="number">3</span>) <span class="built_in">sort</span>(nums.<span class="built_in">begin</span>(), nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>()<span class="number">-1</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            l=i+<span class="number">1</span>;</span><br><span class="line">            r=nums.<span class="built_in">size</span>()<span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(i!=<span class="number">0</span> &amp;&amp; nums[i]==nums[i<span class="number">-1</span>]) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]&gt;<span class="number">0</span> &amp;&amp; nums[i]+nums[l]+nums[r] &gt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[l]+nums[r] &lt; <span class="number">0</span>) </span><br><span class="line">                &#123;</span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[l]+nums[r] &gt; <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    r--;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(nums[i]+nums[l]+nums[r] == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span>(res.<span class="built_in">size</span>() &amp;&amp; </span><br><span class="line">                       nums[i]==res[count<span class="number">-1</span>][<span class="number">0</span>] &amp;&amp; </span><br><span class="line">                       nums[l]==res[count<span class="number">-1</span>][<span class="number">1</span>] &amp;&amp; </span><br><span class="line">                       nums[r]==res[count<span class="number">-1</span>][<span class="number">2</span>]) ;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        res.<span class="built_in">push_back</span>(temp);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[i]);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[l]);</span><br><span class="line">                        res[count].<span class="built_in">push_back</span>(nums[r]);</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                    </span><br><span class="line">                    l++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="思路：-6"><a href="#思路：-6" class="headerlink" title="思路："></a>思路：</h3><p>先对元数组排序，使用双指针法。<br>固定第一个元素不动，在其右边的区间的左右各设置一个指针，检查三数之和，如果大于零，第一个元素右移，此时无解。<br>如果和小于零，将区间左指针右移，同样的，如果和大于零，将区间右指针左移，直至左右指针相遇。当遇到满足条件的组合时，将其添加进入结果中。</p>
<p>需要注意特殊情况，例如数组元素为空或数组长度小于三。还有结果的去重，注意结果数组的初始大小为0，小心数组越界。</p>
<p>时间复杂度：O(n^2)，空间复杂度：O(n)。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
        <tag>Leetcode</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝色降落伞</title>
    <url>/2021/06/04/%E8%93%9D%E8%89%B2%E9%99%8D%E8%90%BD%E4%BC%9E/</url>
    <content><![CDATA[<p>打开窗穿过走廊，下起雨来的弄堂</p>
<p>风里飘散的头发，门里空荡荡的家</p>
<p>我枕头下的梦想 ，我书包里的惆怅</p>
<p>她们等着我发芽，等到一地的落花</p>
<span id="more"></span>

<hr>
<p>我蓝色的降落伞，在天空里那么孤单</p>
<p>飘向翻涌的人海，望着我被掩埋</p>
<p>那个青涩的男孩，在岁月里那么孤单</p>
<p>蓦然跳下老秋千，忽明忽暗地走远</p>
<hr>
<p>打开窗穿过走廊，下起雨来的心房</p>
<p>风里飘散的头发，门外空荡荡的家</p>
<p>从不开始的冬天，从未晴朗的屋檐</p>
<p>没人教会我想念，烧成灰烬的木棉</p>
<hr>
<p>我蓝色的降落伞，在天空里那么孤单</p>
<p>飘向翻涌的人海，望着我被掩埋</p>
<p>那个青涩的男孩，在岁月里那么孤单</p>
<p>他嘴角的那根烟，忽明忽暗地走远</p>
<hr>
<p>蓝色的降落伞，在天空里那么孤单</p>
<p>飘向翻涌的人海，望着我被掩埋</p>
<p>那个青涩的男孩，在岁月里那么孤单</p>
<p>他嘴角的那根烟，忽明忽暗地走远</p>
]]></content>
      <categories>
        <category>歌词</category>
      </categories>
      <tags>
        <tag>周深</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/06/04/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<span id="more"></span>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
